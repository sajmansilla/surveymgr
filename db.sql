DROP TABLE IF EXISTS participants;
DROP TABLE IF EXISTS people;
DROP TABLE IF EXISTS teams;
DROP TABLE IF EXISTS questions_x_survey;
DROP TABLE IF EXISTS surveys;
DROP TABLE IF EXISTS questions;
DROP TABLE IF EXISTS categories;
DROP TABLE IF EXISTS particip_x_survey;

CREATE TABLE people (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email   varchar(150) NOT NULL CHECK (email <> '')
);

CREATE UNIQUE INDEX email_idx ON people (email);

CREATE TABLE teams (
    team_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    team_name   varchar(150) NOT NULL CHECK (team_name <> '')
);

CREATE UNIQUE INDEX team_name_idx ON teams (team_name);

CREATE TABLE participants (
    /*
    This table maintains the teams constellations. Whenever a change occurs in 
    a team, we need to update this table.
    */
    person_id INT,
    team_id INT,

    PRIMARY KEY(person_id, team_id),
    
    CONSTRAINT fk_person
      FOREIGN KEY(person_id)
        REFERENCES people(id)
        ON DELETE CASCADE,

    CONSTRAINT fk_team
      FOREIGN KEY(team_id)
        REFERENCES teams(team_id)
        ON DELETE CASCADE
);

CREATE TABLE categories(
    category_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    category_name varchar(50),
    category_description TEXT
);

CREATE UNIQUE INDEX category_idx ON categories (category_name);

CREATE TABLE questions(
    question_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    question TEXT,
    category_id INT,

    CONSTRAINT fk_category
      FOREIGN KEY(category_id)
        REFERENCES categories(category_id)
        ON DELETE NO ACTION
);

CREATE TABLE surveys(
    survey_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    date_start timestamp with time zone,
    date_end timestamp with time zone
);

CREATE TABLE questions_x_survey(
    survey_id INT,
    question_id INT,

    PRIMARY KEY(survey_id, question_id),
    
    CONSTRAINT fk_survey
      FOREIGN KEY(survey_id)
        REFERENCES surveys(survey_id)
        ON DELETE CASCADE,

    CONSTRAINT fk_question
      FOREIGN KEY(question_id)
        REFERENCES questions(question_id)
        ON DELETE CASCADE
);

CREATE TABLE particip_x_survey(
    /*
    This table accumulate the teams constellations survey by survey.
    Whenever a new survey is created, this table will be filled with the team's
    current constellation.
    */
    survey_id INT,
    participant VARCHAR(255), /* Hash of participant for anonymity purposes.*/
    team_id INT,

    PRIMARY KEY(survey_id, participant, team_id),
    
    CONSTRAINT fk_pxs_team
      FOREIGN KEY(team_id)
        REFERENCES teams(team_id)
        ON DELETE CASCADE,
    
    CONSTRAINT fk_pxs_survey
      FOREIGN KEY(survey_id)
        REFERENCES surveys(survey_id)
        ON DELETE CASCADE
);